{"version":3,"sources":["config/index.js","substrate-lib/SubstrateContext.js","AccountSelector.js","BlockNumber.js","NodeInfo.js","BlockInfo.js","BlockSearch.js","App.js","index.js"],"names":["configEnv","require","envVars","reduce","mem","n","undefined","process","slice","config","configCommon","connectedSocket","queryString","parse","window","location","search","rpc","PROVIDER_SOCKET","console","log","INIT_STATE","socket","jsonrpc","RPC","types","CUSTOM_TYPES","keyring","keyringState","api","apiError","apiState","reducer","state","action","type","payload","Error","loadAccts","SubstrateContext","React","createContext","SubstrateContextProvider","props","initState","forEach","key","useReducer","dispatch","provider","WsProvider","_api","ApiPromise","on","isReady","then","err","connect","asyncLoadAccounts","a","web3Enable","APP_NAME","web3Accounts","allAccounts","map","address","meta","name","source","loadAll","isDevelopment","DEVELOPMENT_KEYRING","error","loadAccounts","Provider","value","children","useSubstrate","useContext","Main","setAccountAddress","useState","accountSelected","setAccountSelected","keyringOptions","getPairs","account","text","toUpperCase","icon","initialAddress","length","useEffect","Menu","attached","tabular","style","backgroundColor","borderColor","paddingTop","paddingBottom","Container","Image","src","size","position","alignItems","target","rel","href","Button","basic","circular","color","Dropdown","selection","clearable","placeholder","options","onChange","_","dropdown","BalanceAnnotation","accountBalance","setAccountBalance","unsubscribe","query","system","balance","data","free","toHuman","unsub","catch","Label","pointing","Icon","AccountSelector","finalized","blockNumber","setBlockNumber","blockNumberTimer","setBlockNumberTimer","bestNumber","derive","chain","bestNumberFinalized","unsubscribeAll","number","toNumber","timer","time","id","setInterval","clearInterval","Grid","Column","Card","Content","textAlign","Statistic","label","extra","BlockNumber","nodeInfo","setNodeInfo","Promise","all","version","nodeName","nodeVersion","getInfo","Header","Meta","Description","NodeInfo","blockInfo","setBlockInfo","subscribeNewHeads","header","e","margin","Table","celled","Body","Row","Cell","hash","parentHash","stateRoot","extrinsicsRoot","BlockInfo","getBlock","blockhash","setBlockhash","getBlockInfo","getHeader","Form","onSubmit","Group","widths","Input","width","content","HeaderCell","BlockInfoBySeach","accountAddress","loader","getPair","Dimmer","active","Loader","centered","columns","padded","Message","negative","compact","floating","JSON","stringify","contextRef","createRef","ref","Sticky","context","stackable","stretched","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.87d7fc7d.chunk.js","sourcesContent":["import configCommon from './common.json';\n// Using `require` as `import` does not support dynamic loading (yet).\nconst configEnv = require(`./${process.env.NODE_ENV}.json`);\n\n// Accepting React env vars and aggregating them into `config` object.\nconst envVarNames = [\n  'REACT_APP_PROVIDER_SOCKET',\n  'REACT_APP_DEVELOPMENT_KEYRING'\n];\nconst envVars = envVarNames.reduce((mem, n) => {\n  // Remove the `REACT_APP_` prefix\n  if (process.env[n] !== undefined) mem[n.slice(10)] = process.env[n];\n  return mem;\n}, {});\n\nconst config = { ...configCommon, ...configEnv, ...envVars };\nexport default config;\n","import React, { useReducer, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport jsonrpc from '@polkadot/types/interfaces/jsonrpc';\nimport queryString from 'query-string';\n\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport { web3Accounts, web3Enable } from '@polkadot/extension-dapp';\nimport keyring from '@polkadot/ui-keyring';\n\nimport config from '../config';\n\nconst parsedQuery = queryString.parse(window.location.search);\nconst connectedSocket = parsedQuery.rpc || config.PROVIDER_SOCKET;\nconsole.log(`Connected socket: ${connectedSocket}`);\n\n///\n// Initial state for `useReducer`\n\nconst INIT_STATE = {\n  socket: connectedSocket,\n  jsonrpc: { ...jsonrpc, ...config.RPC },\n  types: config.CUSTOM_TYPES,\n  keyring: null,\n  keyringState: null,\n  api: null,\n  apiError: null,\n  apiState: null\n};\n\n///\n// Reducer function for `useReducer`\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'CONNECT_INIT':\n      return { ...state, apiState: 'CONNECT_INIT' };\n\n    case 'CONNECT':\n      return { ...state, api: action.payload, apiState: 'CONNECTING' };\n\n    case 'CONNECT_SUCCESS':\n      return { ...state, apiState: 'READY' };\n\n    case 'CONNECT_ERROR':\n      return { ...state, apiState: 'ERROR', apiError: action.payload };\n\n    case 'LOAD_KEYRING':\n      return { ...state, keyringState: 'LOADING' };\n\n    case 'SET_KEYRING':\n      return { ...state, keyring: action.payload, keyringState: 'READY' };\n\n    case 'KEYRING_ERROR':\n      return { ...state, keyring: null, keyringState: 'ERROR' };\n\n    default:\n      throw new Error(`Unknown type: ${action.type}`);\n  }\n};\n\n///\n// Connecting to the Substrate node\n\nconst connect = (state, dispatch) => {\n  const { apiState, socket, jsonrpc, types } = state;\n  // We only want this function to be performed once\n  if (apiState) return;\n\n  dispatch({ type: 'CONNECT_INIT' });\n\n  const provider = new WsProvider(socket);\n  const _api = new ApiPromise({ provider, types, rpc: jsonrpc });\n\n  // Set listeners for disconnection and reconnection event.\n  _api.on('connected', () => {\n    dispatch({ type: 'CONNECT', payload: _api });\n    // `ready` event is not emitted upon reconnection and is checked explicitly here.\n    _api.isReady.then((_api) => dispatch({ type: 'CONNECT_SUCCESS' }));\n  });\n  _api.on('ready', () => dispatch({ type: 'CONNECT_SUCCESS' }));\n  _api.on('error', err => dispatch({ type: 'CONNECT_ERROR', payload: err }));\n};\n\n///\n// Loading accounts from dev and polkadot-js extension\n\nlet loadAccts = false;\nconst loadAccounts = (state, dispatch) => {\n  const asyncLoadAccounts = async () => {\n    dispatch({ type: 'LOAD_KEYRING' });\n    try {\n      await web3Enable(config.APP_NAME);\n      let allAccounts = await web3Accounts();\n      allAccounts = allAccounts.map(({ address, meta }) =>\n        ({ address, meta: { ...meta, name: `${meta.name} (${meta.source})` } }));\n      keyring.loadAll({ isDevelopment: config.DEVELOPMENT_KEYRING }, allAccounts);\n      dispatch({ type: 'SET_KEYRING', payload: keyring });\n    } catch (e) {\n      console.error(e);\n      dispatch({ type: 'KEYRING_ERROR' });\n    }\n  };\n\n  const { keyringState } = state;\n  // If `keyringState` is not null `asyncLoadAccounts` is running.\n  if (keyringState) return;\n  // If `loadAccts` is true, the `asyncLoadAccounts` has been run once.\n  if (loadAccts) return dispatch({ type: 'SET_KEYRING', payload: keyring });\n\n  // This is the heavy duty work\n  loadAccts = true;\n  asyncLoadAccounts();\n};\n\nconst SubstrateContext = React.createContext();\n\nconst SubstrateContextProvider = (props) => {\n  // filtering props and merge with default param value\n  const initState = { ...INIT_STATE };\n  const neededPropNames = ['socket', 'types'];\n  neededPropNames.forEach(key => {\n    initState[key] = (typeof props[key] === 'undefined' ? initState[key] : props[key]);\n  });\n\n  const [state, dispatch] = useReducer(reducer, initState);\n  connect(state, dispatch);\n  loadAccounts(state, dispatch);\n\n  return <SubstrateContext.Provider value={state}>\n    {props.children}\n  </SubstrateContext.Provider>;\n};\n\n// prop typechecking\nSubstrateContextProvider.propTypes = {\n  socket: PropTypes.string,\n  types: PropTypes.object\n};\n\nconst useSubstrate = () => ({ ...useContext(SubstrateContext) });\n\nexport { SubstrateContextProvider, useSubstrate };\n","import React, { useState, useEffect } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\nimport {\n  Menu,\n  Button,\n  Dropdown,\n  Container,\n  Icon,\n  Image,\n  Label\n} from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { keyring } = useSubstrate();\n  const { setAccountAddress } = props;\n  const [accountSelected, setAccountSelected] = useState('');\n\n  // Get the list of accounts we possess the private key for\n  const keyringOptions = keyring.getPairs().map(account => ({\n    key: account.address,\n    value: account.address,\n    text: account.meta.name.toUpperCase(),\n    icon: 'user'\n  }));\n\n  const initialAddress =\n    keyringOptions.length > 0 ? keyringOptions[0].value : '';\n\n  // Set the initial address\n  useEffect(() => {\n    setAccountAddress(initialAddress);\n    setAccountSelected(initialAddress);\n  }, [setAccountAddress, initialAddress]);\n\n  const onChange = address => {\n    // Update state with new account address\n    setAccountAddress(address);\n    setAccountSelected(address);\n  };\n\n  return (\n    <Menu\n      attached='top'\n      tabular\n      style={{\n        backgroundColor: '#fff',\n        borderColor: '#fff',\n        paddingTop: '1em',\n        paddingBottom: '1em'\n      }}\n    >\n      <Container>\n        <Menu.Menu>\n          <Image src={`${process.env.PUBLIC_URL}/assets/substrate-logo.png`} size='mini' />\n        </Menu.Menu>\n        <Menu.Menu position='right' style={{ alignItems: 'center' }}>\n          { !accountSelected\n            ? <span>\n              Add your account with the{' '}\n              <a\n                target='_blank'\n                rel='noopener noreferrer'\n                href='https://github.com/polkadot-js/extension'\n              >\n                Polkadot JS Extension\n              </a>\n            </span>\n            : null }\n          <CopyToClipboard text={accountSelected}>\n            <Button\n              basic\n              circular\n              size='large'\n              icon='user'\n              color={accountSelected ? 'green' : 'red'}\n            />\n          </CopyToClipboard>\n          <Dropdown\n            search\n            selection\n            clearable\n            placeholder='Select an account'\n            options={keyringOptions}\n            onChange={(_, dropdown) => {\n              onChange(dropdown.value);\n            }}\n            value={accountSelected}\n          />\n          <BalanceAnnotation accountSelected={accountSelected} />\n        </Menu.Menu>\n      </Container>\n    </Menu>\n  );\n}\n\nfunction BalanceAnnotation (props) {\n  const { accountSelected } = props;\n  const { api } = useSubstrate();\n  const [accountBalance, setAccountBalance] = useState(0);\n\n  // When account address changes, update subscriptions\n  useEffect(() => {\n    let unsubscribe;\n\n    // If the user has selected an address, create a new subscription\n    accountSelected &&\n      api.query.system.account(accountSelected, balance => {\n        setAccountBalance(balance.data.free.toHuman());\n      })\n        .then(unsub => {\n          unsubscribe = unsub;\n        })\n        .catch(console.error);\n\n    return () => unsubscribe && unsubscribe();\n  }, [api, accountSelected]);\n\n  return accountSelected ? (\n    <Label pointing='left'>\n      <Icon name='money' color='green' />\n      {accountBalance}\n    </Label>\n  ) : null;\n}\n\nexport default function AccountSelector (props) {\n  const { api, keyring } = useSubstrate();\n  return keyring.getPairs && api.query ? <Main {...props} /> : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Statistic, Grid, Card, Icon } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const { finalized } = props;\n  const [blockNumber, setBlockNumber] = useState(0);\n  const [blockNumberTimer, setBlockNumberTimer] = useState(0);\n\n  const bestNumber = finalized\n    ? api.derive.chain.bestNumberFinalized\n    : api.derive.chain.bestNumber;\n\n  useEffect(() => {\n    let unsubscribeAll = null;\n\n    bestNumber(number => {\n      setBlockNumber(number.toNumber());\n      setBlockNumberTimer(0);\n    })\n      .then(unsub => {\n        unsubscribeAll = unsub;\n      })\n      .catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [bestNumber]);\n\n  const timer = () => {\n    setBlockNumberTimer(time => time + 1);\n  };\n\n  useEffect(() => {\n    const id = setInterval(timer, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content textAlign='center'>\n          <Statistic\n            label={(finalized ? 'Finalized' : 'Current') + ' Block'}\n            value={blockNumber}\n          />\n        </Card.Content>\n        <Card.Content extra>\n          <Icon name='time' /> {blockNumberTimer}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n\nexport default function BlockNumber (props) {\n  const { api } = useSubstrate();\n  return api.derive &&\n    api.derive.chain &&\n    api.derive.chain.bestNumber &&\n    api.derive.chain.bestNumberFinalized ? (\n      <Main {...props} />\n    ) : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Card, Icon, Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [nodeInfo, setNodeInfo] = useState({});\n\n  useEffect(() => {\n    const getInfo = async () => {\n      try {\n        const [chain, nodeName, nodeVersion] = await Promise.all([\n          api.rpc.system.chain(),\n          api.rpc.system.name(),\n          api.rpc.system.version()\n        ]);\n        setNodeInfo({ chain, nodeName, nodeVersion });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    getInfo();\n  }, [api.rpc.system]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>{nodeInfo.nodeName}</Card.Header>\n          <Card.Meta>\n            <span>{nodeInfo.chain}</span>\n          </Card.Meta>\n          <Card.Description>\n            Built using the{' '}\n            <a href='https://github.com/substrate-developer-hub/substrate-front-end-template'>\n              Substrate Front End Template\n            </a>\n          </Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n          <Icon name='setting' />v{nodeInfo.nodeVersion}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n\nexport default function NodeInfo (props) {\n  const { api } = useSubstrate();\n  return api.rpc &&\n    api.rpc.system &&\n    api.rpc.system.chain &&\n    api.rpc.system.name &&\n    api.rpc.system.version ? (\n      <Main {...props} />\n    ) : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Form, Grid, Label, Table, Icon, Message } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main(props) {\n  const { api } = useSubstrate();\n  const [blockInfo, setBlockInfo] = useState();\n\n  useEffect(() => {\n    const unsubscribeAll = null;\n    const getInfo = async () => {\n      try {\n        api.rpc.chain.subscribeNewHeads((header) => {\n          setBlockInfo(header);\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    getInfo();\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [api.derive.chain, api.rpc.chain, blockInfo]);\n\n  return (\n    <Grid.Column style={{ margin: '1rem 0s' }}>\n    <h1>Latest Block Information</h1>\n      {blockInfo && (\n        <Table celled>\n          <Table.Body>\n            <Table.Row>\n              <Table.Cell>Block</Table.Cell>\n              <Table.Cell>{blockInfo.number.toNumber()}</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Hash</Table.Cell>\n              <Table.Cell>{blockInfo.hash.toHuman()}</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>ParentHash</Table.Cell>\n              <Table.Cell>{blockInfo.parentHash.toHuman()}</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>State Root</Table.Cell>\n              <Table.Cell>{blockInfo.stateRoot.toHuman()}</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Extrinsics Root</Table.Cell>\n              <Table.Cell>{blockInfo.extrinsicsRoot.toHuman()}</Table.Cell>\n            </Table.Row>\n          </Table.Body>\n        </Table>\n      )}\n    </Grid.Column>\n  );\n}\n\nexport default function BlockInfo(props) {\n  const { api } = useSubstrate();\n  return api.rpc &&\n    api.rpc.system &&\n    api.rpc.chain &&\n    api.derive.chain &&\n    api.derive.chain.bestNumber &&\n    api.rpc.chain.getBlock &&\n    api.rpc.chain.subscribeNewHeads ? (\n    <Main {...props} />\n  ) : null;\n}","import React, { useEffect, useState } from 'react';\nimport { Form, Grid, Table, Icon, Message } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main(props) {\n  const { api } = useSubstrate();\n  const [blockInfo, setBlockInfo] = useState();\n  const [blockhash, setBlockhash] = useState();\n\n  const getBlockInfo = async (blockhash) => {\n    try {\n      const blockInfo = await api.rpc.chain.getHeader(blockhash);\n\n      setBlockInfo(blockInfo);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return (\n    <Grid.Column>\n      <h1>Search for a Block</h1>\n\n      <Form\n        onSubmit={async (e, { value }) => await getBlockInfo(blockhash)}\n        size='small'\n      >\n        <Form.Group widths={12}>\n          <Form.Input\n            size='large'\n            width={10}\n            placeholder={'Insert hash here'}\n            onChange={(e, { value }) => setBlockhash(value)}\n          />\n          <Form.Button content={<Icon name='search'/>} />\n        </Form.Group>\n      </Form>\n\n      {blockInfo && blockInfo.number && (\n        <Table celled>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell>Item</Table.HeaderCell>\n              <Table.HeaderCell>Data</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            <Table.Row>\n              <Table.Cell>Block</Table.Cell>\n              <Table.Cell>{blockInfo.number.toNumber()}</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Parent Hash</Table.Cell>\n              <Table.Cell>{blockInfo.parentHash.toHuman()}</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>State Root</Table.Cell>\n              <Table.Cell>{blockInfo.stateRoot.toHuman()}</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Extrinsics Root</Table.Cell>\n              <Table.Cell>{blockInfo.extrinsicsRoot.toHuman()}</Table.Cell>\n            </Table.Row>\n          </Table.Body>\n        </Table>\n      )}\n    </Grid.Column>\n  );\n}\n\nexport default function BlockInfoBySeach(props) {\n  const { api } = useSubstrate();\n  return api.rpc && api.rpc.chain.getHeader ? <Main {...props} /> : null;\n}","import React, { useState, createRef } from 'react';\nimport { Container, Dimmer, Loader, Grid, Sticky, Message } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\nimport { SubstrateContextProvider, useSubstrate } from './substrate-lib';\nimport { DeveloperConsole } from './substrate-lib/components';\n\nimport AccountSelector from './AccountSelector';\nimport BlockNumber from './BlockNumber';\nimport NodeInfo from './NodeInfo';\nimport BlockInfo from './BlockInfo';\nimport BlockSearch from './BlockSearch';\n\nfunction Main () {\n  const [accountAddress, setAccountAddress] = useState(null);\n  const { apiState, keyring, keyringState, apiError } = useSubstrate();\n  const accountPair =\n    accountAddress &&\n    keyringState === 'READY' &&\n    keyring.getPair(accountAddress);\n\n  const loader = text =>\n    <Dimmer active>\n      <Loader size='small'>{text}</Loader>\n    </Dimmer>;\n\n  const message = err =>\n    <Grid centered columns={2} padded>\n      <Grid.Column>\n        <Message negative compact floating\n          header='Error Connecting to Substrate'\n          content={`${JSON.stringify(err, null, 4)}`}\n        />\n      </Grid.Column>\n    </Grid>;\n\n  if (apiState === 'ERROR') return message(apiError);\n  else if (apiState !== 'READY') return loader('Connecting to Substrate');\n\n  if (keyringState !== 'READY') {\n    return loader('Loading accounts (please review any extension\\'s authorization)');\n  }\n\n  const contextRef = createRef();\n\n  return (\n    <div ref={contextRef}>\n      <Sticky context={contextRef}>\n        <AccountSelector setAccountAddress={setAccountAddress} />\n      </Sticky>\n      <Container>\n        <Grid stackable columns='equal'>\n          <Grid.Row stretched>\n            <NodeInfo />\n            <BlockNumber />\n            <BlockNumber finalized />\n          </Grid.Row>\n          <Grid.Row stretched>\n            <BlockInfo />\n          </Grid.Row>\n          <Grid.Row stretched>\n            <BlockSearch />\n          </Grid.Row>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default function App () {\n  return (\n    <SubstrateContextProvider>\n      <Main />\n    </SubstrateContextProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}